generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  passwordHash    String
  role            UserRole        @default(FAN)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  artistProfile   ArtistProfile?
  venueProfile    VenueProfile?
}

enum UserRole {
  SUPERADMIN
  ADMIN
  ORGANIZER
  ARTIST
  VENUE
  FAN
}

model ArtistProfile {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  genre            String
  subGenre         String?
  bookingType      BookingType
  foundingYear     Int?
  label            String?
  isIndependent    Boolean   @default(true)
  memberCount      Int?
  contactEmail     String?
  contactPhone     String?
  priceMin         Float?
  priceMax         Float?
  photoUrl         String?
  videoUrl         String?
  profilePhotoUrl  String?
  rateCardUrl      String?
  epkUrl           String?
  riderUrl         String?

  spotifyUrl       String?
  youtubeUrl       String?
  appleMusicUrl    String?
  facebookUrl      String?
  instagramUrl     String?
  soundcloudUrl    String?
  shazamUrl        String?
  bandcampUrl      String?
  tiktokUrl        String?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int       @unique

  events           Event[]   @relation("ArtistPerformances")
}

model VenueProfile {
  id               Int       @id @default(autoincrement())
  name             String
  locationUrl      String
  genre            String
  description      String?
  capacity         Int?
  dateOpen         DateTime?
  dateClose        DateTime?
  priceRate        PriceRate?
  timeOpen         String?
  timeClose        String?
  alcoholPolicy    AlcoholPolicy
  ageRestriction   String?
  profilePhotoUrl  String?
  photoUrls        String[]
  contactEmail     String?
  contactPhone     String?
  facebookUrl      String?
  instagramUrl     String?
  lineUrl          String?
  tiktokUrl        String?
  websiteUrl       String?

  // ✅ พิกัดสำหรับแผนที่
  latitude         Float?
  longitude        Float?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int       @unique

  events           Event[]   @relation("VenueEvents")

  @@index([latitude, longitude])
}

enum BookingType {
  FULL_BAND
  TRIO
  DUO
  SOLO
}

enum PriceRate {
  BUDGET
  STANDARD
  PREMIUM
  VIP
  LUXURY
}

enum AlcoholPolicy {
  SERVE
  NONE
  BYOB
}

model Event {
  id               Int            @id @default(autoincrement())
  name             String
  description      String?
  posterUrl        String?
  conditions       String?
  eventType        EventType
  ticketing        TicketingType
  ticketLink       String?
  alcoholPolicy    AlcoholPolicy
  ageRestriction   String?
  date             DateTime
  doorOpenTime     String?
  endTime          String?
  genre            String?

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  venue            VenueProfile   @relation("VenueEvents", fields: [venueId], references: [id], onDelete: Cascade)
  venueId          Int

  artists          ArtistProfile[] @relation("ArtistPerformances")
}

enum EventType {
  OUTDOOR
  INDOOR
  HYBRID
}

enum TicketingType {
  FREE
  DONATION
  TICKET_MELON
  DIRECT_CONTACT
  ONSITE_SALES
}
